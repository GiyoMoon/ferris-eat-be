//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use chrono::{TimeZone, Utc};
use once_cell::sync::Lazy;
use regex::Regex;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use validator::{Validate, ValidationError};

static LETTER_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new(r"^.*[a-zA-Z]+.*$").unwrap());
static NUMBER_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new(r"^.*\d+.*$").unwrap());

static SPECIAL_CHAR_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new(r"^.*[^\da-zA-Z]+.*$").unwrap());

fn validate_username(value: &str) -> Result<(), ValidationError> {
    let letter = LETTER_REGEX.is_match(value);
    if !letter {
        return Err(ValidationError::new("invalid_password"));
    };
    let number = NUMBER_REGEX.is_match(value);
    if !number {
        return Err(ValidationError::new("invalid_password"));
    };
    let special_char = SPECIAL_CHAR_REGEX.is_match(value);
    if !special_char {
        return Err(ValidationError::new("invalid_password"));
    };
    Ok(())
}

fn default_date_time() -> DateTime {
    Utc.timestamp(0, 0).naive_utc()
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, Validate)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,
    #[validate(length(min = 4, message = "Username has to be 4 or more characters long"))]
    #[sea_orm(unique)]
    pub username: String,
    pub alias: String,
    #[validate(email(message = "Not a valid email address"))]
    #[sea_orm(unique)]
    pub email: String,
    #[validate(
        length(min = 8, message = "Password has to be 8 or more characters long"),
        custom(
            function = "validate_username",
            message = "Password must contain at least one letter, one number and one special character"
        )
    )]
    pub password: String,
    #[serde(skip_deserializing, default = "default_date_time")]
    pub created_at: DateTime,
    #[serde(skip_deserializing, default = "default_date_time")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
    #[sea_orm(has_many = "super::ingredient::Entity")]
    Ingredient,
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipe.def()
    }
}

impl Related<super::ingredient::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingredient.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
