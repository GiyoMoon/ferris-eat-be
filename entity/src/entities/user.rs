//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use chrono::{TimeZone, Utc};
use fancy_regex::Regex;
use once_cell::sync::Lazy;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use validator::{Validate, ValidationError};

static PASSWORD_REGEX: Lazy<Regex> =
    Lazy::new(|| Regex::new(r"(?=.*[A-Za-z])(?=.*\d)(?=.*[^\dA-Za-z]).{8,}").unwrap());

fn validate_password(value: &str) -> Result<(), ValidationError> {
    let is_match = PASSWORD_REGEX
        .is_match(value)
        .map_err(|_| ValidationError::new("invalid_password"))?;
    if !is_match {
        return Err(ValidationError::new("invalid_password"));
    }
    Ok(())
}

fn default_date_time() -> DateTime {
    Utc.timestamp(0, 0).naive_utc()
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, Validate)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,
    #[validate(length(min = 4, message = "Username has to be 4 or more characters long"))]
    #[sea_orm(unique)]
    pub username: String,
    pub alias: String,
    #[validate(email(message = "Not a valid email address"))]
    #[sea_orm(unique)]
    pub email: String,
    #[validate(custom(
        function = "validate_password",
        message = "Password must at least be 8 chars long, contain at least one letter, one number and one special character"
    ))]
    pub password: String,
    #[serde(skip_deserializing, default = "default_date_time")]
    pub created_at: DateTime,
    #[serde(skip_deserializing, default = "default_date_time")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
    #[sea_orm(has_many = "super::ingredient::Entity")]
    Ingredient,
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipe.def()
    }
}

impl Related<super::ingredient::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingredient.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
